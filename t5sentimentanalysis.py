# -*- coding: utf-8 -*-
"""T5SentimentAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bNBcU9EZEc4nu9cZW-me_mBYW27bUZMn
"""

# install transformers
!pip install transformers

from transformers import pipeline

# create pipeline for sentiment analysis
classification = pipeline('sentiment-analysis')

# download dataset from given link for sentiment analysis
! wget https://www.dropbox.com/s/h5n6nl55bngk8rx/twitter.zip?dl=0

# Unzipping the data
!unzip -q "twitter.zip?dl=0"

# import required libraries
from transformers import pipeline
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import roc_auc_score, f1_score, confusion_matrix
from sklearn.model_selection import train_test_split

# create pipeline for sentiment analysis
classification = pipeline('sentiment-analysis')
type(classification)

# read data into DataFrame
df = pd.read_csv("twitter_training.csv")
# set the columns
df.columns = ['id','entity','sentiment','Tweet content']
# drop null values
df = df.dropna()
# print first 5 rows
df.head()

# select only required columns
df = df[['sentiment','Tweet content']]

df['sentiment'].hist()

# filter positive and negative sentiments only
df = df[(df.sentiment == 'Positive') | (df.sentiment == 'Negative')]
df['sentiment'].hist()

target_map = { 'Positive': 1, 'Negative': 0}
df['target'] = df['sentiment'].map(target_map)

texts = df['Tweet content'].to_list()
df['sentiment'].hist()

predictions = classification(texts)

predictions[:10]

probs = [d['score'] if d['label'].startswith('P') else 1 - d['score'] for d in predictions ]

# print few probabilities
probs[:10]

preds = [1 if d['label'].startswith('P') else 0 for d in predictions]

# convert into numpy array
preds = np.array(preds)

print("acc:", np.mean(df['target'] == preds))

# calculate confusion matrix
cm = confusion_matrix(df['target'], preds)
# create function for plotting confusion matrix
def plot_cm(cm):
  classes = ['negative','positive']
  df_cm = pd.DataFrame(cm, index=classes, columns=classes)
  ax = sns.heatmap(df_cm, annot = True, fmt='g')
  ax.set_xlabel('Predicted')
  ax.set_ylabel('Actual')

plot_cm(cm)